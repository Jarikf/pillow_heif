name: Build, test, publish wheels

on:
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]
    tags:
      - v*
  workflow_dispatch:

jobs:
  sdist:
    name: Source distribution
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install requirements
        run: |
          pip install --user check-manifest twine

      - name: Install brew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install libffi libheif

      - name: Run check-manifest
        run: |
          python -m check_manifest

      - name: Build sdist
        run: |
          python -m build --sdist --outdir wheelhouse

      - name: Install from sdist
        run: |
          pip install --user wheelhouse/*.tar.gz

      - name: Check sdist
        run: |
          python -m twine check wheelhouse/*

      - name: Upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  wheels:
    # if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: true
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_aarch64
          - runs-on: macos-11
            cibw-arch: macosx_x86_64
          - runs-on: macos-11
            cibw-arch: macosx_arm64

    name: Wheels â€¢ ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Set up QEMU
        if: matrix.cibw-arch == 'manylinux_aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: ${{ matrix.python-arch }}

      - name: Install requirements
        run: |
          python -m pip install cibuildwheel twine

      - name: Arm linux pre configure enviroment
        if: matrix.cibw-arch == 'manylinux_aarch64'
        run: echo "CIBW_ARCHS=aarch64" >> $GITHUB_ENV

      - name: macOS x64 pre configure enviroment
        if: matrix.cibw-arch == 'macosx_x86_64'
        shell: bash
        run: |
          echo "CIBW_ARCHS_MACOS=x86_64" >> $GITHUB_ENV

      - name: macOS arm64 pre configure enviroment
        if: matrix.cibw-arch == 'macosx_arm64'
        shell: bash
        run: |
          echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV

      - name: Configure cibuildwheel
        shell: bash
        run: |
          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
          echo "CIBW_SKIP=cp310-* pp*" >> $GITHUB_ENV
          echo "CIBW_TEST_REQUIRES=pytest piexif" >> $GITHUB_ENV
          echo "CIBW_TEST_COMMAND=pytest {project}" >> $GITHUB_ENV

      - name: Run cibuildwheel
        run: |
          cibuildwheel

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Check built wheels
        run: |
          twine check wheelhouse/*

#  create_release:
#    name: Create release
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/v')
#    needs: [sdist, wheels]
#
#    steps:
#      - name: Collect sdist and wheels
#        uses: actions/download-artifact@v2
#        with:
#          name: wheels
#          path: wheelhouse
#
#      - name: Get release name
#        id: get_version
#        run: |
#          echo "::set-output name=version::${GITHUB_REF##refs/tags/v}"
#
#      - name: Upload sdist and wheels to release
#        uses: ncipollo/release-action@v1.8.8
#        with:
#          name: ${{ steps.get_version.outputs.version }}
#          draft: true
#          artifacts: wheelhouse/*
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Publish wheels to PyPI
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          pip install twine
#          ls -la wheelhouse/
#          twine upload --skip-existing wheelhouse/*.whl
#          twine upload wheelhouse/*tar.gz
